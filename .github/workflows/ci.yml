name: ci

on: [push]

jobs:
  build: # You could rename this to 'test' if testing is the primary purpose of this job

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12' # Using a specific recent version like 3.10 or higher

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Check if requirements.txt exists before trying to install from it
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # If you have test-specific dependencies, you might have a requirements_test.txt
        # or add them to your main requirements.txt

    - name: Display Python version
      run: python --version # Simpler way to display version

    - name: Create dummy .env file for tests
      run: |
        echo "POSTGRES_USER=test_ci_user" > .env
        echo "POSTGRES_PASSWORD=test_ci_password" >> .env
        echo "POSTGRES_HOST=localhost_ci" >> .env
        echo "POSTGRES_PORT=5433" >> .env
        echo "POSTGRES_DB=test_ci_db" >> .env
        echo "NVDB_BASE_URL=https://fake-nvdb-api.test.com" >> .env
        echo "NVDB_OBJECT_ID=000" >> .env # Placeholder
        echo "NVDB_PARAM_INKLUDER=minimum" >> .env
        echo "NVDB_PARAM_SRID=0000" >> .env
        echo "NVDB_PARAM_SEGMENTERING=false" >> .env
        echo "NVDB_PARAM_TRAFIKANTGRUPPE=X" >> .env
        echo "NVDB_PARAM_FYLKE=00" >> .env
        echo "NVDB_PARAM_ENDRET_ETTER=2000-01-01T00:00:00Z" >> .env
        echo "NVDB_PARAM_ANTALL=10" >> .env
      # This ensures that load_dotenv() in your scripts finds a .env file,
      # even though most tests should mock os.getenv or use patch.dict.

    - name: Run Python unit tests
      run: |
        export MPLBACKEND=Agg # Use a non-interactive backend for Matplotlib in CI
        python -m unittest discover tests -v # -v for verbose output
